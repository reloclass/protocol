// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.14.0
// source: relo/protocol/schedule/add.proto

package schedule

import (
	course "github.com/reloclass/core/course"
	schedule "github.com/reloclass/core/schedule"
	vo "github.com/reloclass/protocol/vo"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 添加排课计划请求
type AddReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 学校编号
	// @gotags: json:"schoolId,string" validate:"required"
	SchoolId int64 `protobuf:"varint,2,opt,name=school_id,json=schoolId,proto3" json:"schoolId,string" validate:"required"`
	// 课程编号
	// @gotags: json:"courseId,string" validate:"required"
	CourseId int64 `protobuf:"varint,3,opt,name=course_id,json=courseId,proto3" json:"courseId,string" validate:"required"`
	// 主讲老师
	// @gotags: json:"teacherId,string" validate:"required"
	TeacherId int64 `protobuf:"varint,4,opt,name=teacher_id,json=teacherId,proto3" json:"teacherId,string" validate:"required"`
	// 助教
	// @gotags: json:"assistantIds"
	AssistantIds []string `protobuf:"bytes,5,rep,name=assistant_ids,json=assistantIds,proto3" json:"assistantIds"`
	// 课节名称
	Name string `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	// 开始时间
	// @gotags: json:"startTime" validate:"required"
	StartTime string `protobuf:"bytes,7,opt,name=start_time,json=startTime,proto3" json:"startTime" validate:"required"`
	// 授课时长 单位：分钟
	// @gotags: json:"duration" validate:"omitempty,min=1,max=450"
	Duration int32 `protobuf:"varint,8,opt,name=duration,proto3" json:"duration" validate:"omitempty,min=1,max=450"`
	// 结束时间
	// @gotags: json:"endTime" validate:"required"
	EndTime string `protobuf:"bytes,9,opt,name=end_time,json=endTime,proto3" json:"endTime" validate:"required"`
	// 重复类型
	// @gotags: default:"0" json:"repeatType" validate:"omitempty,oneof=0 1 2 3 4"
	RepeatType schedule.RepeatType `protobuf:"varint,10,opt,name=repeat_type,json=repeatType,proto3,enum=relo.core.schedule.RepeatType" json:"repeatType" default:"0" validate:"omitempty,oneof=0 1 2 3 4"`
	// 子类型
	// @gotags: default:"0" json:"subRepeatType" validate:"omitempty,oneof=1 2 3"
	SubRepeatType schedule.SubRepeatType `protobuf:"varint,11,opt,name=sub_repeat_type,json=subRepeatType,proto3,enum=relo.core.schedule.SubRepeatType" json:"subRepeatType" default:"0" validate:"omitempty,oneof=1 2 3"`
	// 重复次数
	// @gotags: json:"repeatTimes" validate:"omitempty,min=1"
	RepeatTimes int32 `protobuf:"varint,12,opt,name=repeat_times,json=repeatTimes,proto3" json:"repeatTimes" validate:"omitempty,min=1"`
	// 重复间隔
	// @gotags: json:"repeatInterval" validate:"omitempty,min=1"
	RepeatInterval int32 `protobuf:"varint,13,opt,name=repeat_interval,json=repeatInterval,proto3" json:"repeatInterval" validate:"omitempty,min=1"`
	// 重复值
	// @gotags: json:"repeatValues"
	RepeatValues []*schedule.RepeatValue `protobuf:"bytes,14,rep,name=repeat_values,json=repeatValues,proto3" json:"repeatValues"`
	// 上课模式
	// @gotags: default:"1" json:"classMode" validate:"omitempty,oneof=1 2 3"
	ClassMode course.ClassMode `protobuf:"varint,15,opt,name=class_mode,json=classMode,proto3,enum=relo.core.course.ClassMode" json:"classMode" default:"1" validate:"omitempty,oneof=1 2 3"`
	// 允许类型
	// @gotags: default:"1" json:"allowedType" validate:"omitempty,oneof=1 2 3"
	AllowedType schedule.AllowedType `protobuf:"varint,16,opt,name=allowed_type,json=allowedType,proto3,enum=relo.core.schedule.AllowedType" json:"allowedType" default:"1" validate:"omitempty,oneof=1 2 3"`
	// 是否需要验证码
	// json:"isCaptchaRequired" validate:"omitempty"
	IsCaptchaRequired bool `protobuf:"varint,17,opt,name=is_captcha_required,json=isCaptchaRequired,proto3" json:"is_captcha_required,omitempty"`
	// 录制操作类型
	// @gotags: default:"1" json:"recordType" validate:"omitempty,oneof=1 2 3"
	RecordType schedule.RecordType `protobuf:"varint,18,opt,name=record_type,json=recordType,proto3,enum=relo.core.schedule.RecordType" json:"recordType" default:"1" validate:"omitempty,oneof=1 2 3"`
	// 课程计划教学资料
	Materials []*vo.TeachingMaterial `protobuf:"bytes,19,rep,name=materials,proto3" json:"materials,omitempty"`
	// 是否允许直播
	// @gotags: json:"liveAllowedType" validate:"required,oneof=1 2"
	LiveAllowedType schedule.LiveAllowedType `protobuf:"varint,20,opt,name=live_allowed_type,json=liveAllowedType,proto3,enum=relo.core.schedule.LiveAllowedType" json:"liveAllowedType" validate:"required,oneof=1 2"`
	// 视频质量
	// @gotags: json:"videoDimension" validate:"required,oneof=1 2 3"
	VideoDimensionType schedule.VideoDimensionType `protobuf:"varint,21,opt,name=video_dimension_type,json=videoDimensionType,proto3,enum=relo.core.schedule.VideoDimensionType" json:"videoDimension" validate:"required,oneof=1 2 3"`
	// 上台人数
	// @gotags: json:"stageNumber" validate:"required,min=1,max=12"
	StateNumber int32 `protobuf:"varint,22,opt,name=state_number,json=stateNumber,proto3" json:"stageNumber" validate:"required,min=1,max=12"`
}

func (x *AddReq) Reset() {
	*x = AddReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relo_protocol_schedule_add_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddReq) ProtoMessage() {}

func (x *AddReq) ProtoReflect() protoreflect.Message {
	mi := &file_relo_protocol_schedule_add_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddReq.ProtoReflect.Descriptor instead.
func (*AddReq) Descriptor() ([]byte, []int) {
	return file_relo_protocol_schedule_add_proto_rawDescGZIP(), []int{0}
}

func (x *AddReq) GetSchoolId() int64 {
	if x != nil {
		return x.SchoolId
	}
	return 0
}

func (x *AddReq) GetCourseId() int64 {
	if x != nil {
		return x.CourseId
	}
	return 0
}

func (x *AddReq) GetTeacherId() int64 {
	if x != nil {
		return x.TeacherId
	}
	return 0
}

func (x *AddReq) GetAssistantIds() []string {
	if x != nil {
		return x.AssistantIds
	}
	return nil
}

func (x *AddReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddReq) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *AddReq) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *AddReq) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *AddReq) GetRepeatType() schedule.RepeatType {
	if x != nil {
		return x.RepeatType
	}
	return schedule.RepeatType_NONE
}

func (x *AddReq) GetSubRepeatType() schedule.SubRepeatType {
	if x != nil {
		return x.SubRepeatType
	}
	return schedule.SubRepeatType_SUB_REPEAT_TYPE_UNSPECIFIED
}

func (x *AddReq) GetRepeatTimes() int32 {
	if x != nil {
		return x.RepeatTimes
	}
	return 0
}

func (x *AddReq) GetRepeatInterval() int32 {
	if x != nil {
		return x.RepeatInterval
	}
	return 0
}

func (x *AddReq) GetRepeatValues() []*schedule.RepeatValue {
	if x != nil {
		return x.RepeatValues
	}
	return nil
}

func (x *AddReq) GetClassMode() course.ClassMode {
	if x != nil {
		return x.ClassMode
	}
	return course.ClassMode_CLASS_MODE_UNSPECIFIED
}

func (x *AddReq) GetAllowedType() schedule.AllowedType {
	if x != nil {
		return x.AllowedType
	}
	return schedule.AllowedType_ALLOWED_TYPE_UNSPECIFIED
}

func (x *AddReq) GetIsCaptchaRequired() bool {
	if x != nil {
		return x.IsCaptchaRequired
	}
	return false
}

func (x *AddReq) GetRecordType() schedule.RecordType {
	if x != nil {
		return x.RecordType
	}
	return schedule.RecordType_RECORD_TYPE_UNSPECIFIED
}

func (x *AddReq) GetMaterials() []*vo.TeachingMaterial {
	if x != nil {
		return x.Materials
	}
	return nil
}

func (x *AddReq) GetLiveAllowedType() schedule.LiveAllowedType {
	if x != nil {
		return x.LiveAllowedType
	}
	return schedule.LiveAllowedType_LIVE_ALLOWED_TYPE_UNSPECIFIED
}

func (x *AddReq) GetVideoDimensionType() schedule.VideoDimensionType {
	if x != nil {
		return x.VideoDimensionType
	}
	return schedule.VideoDimensionType_VIDEO_DIMENSION_TYPE_UNSPECIFIED
}

func (x *AddReq) GetStateNumber() int32 {
	if x != nil {
		return x.StateNumber
	}
	return 0
}

var File_relo_protocol_schedule_add_proto protoreflect.FileDescriptor

var file_relo_protocol_schedule_add_proto_rawDesc = []byte{
	0x0a, 0x20, 0x72, 0x65, 0x6c, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x61, 0x64, 0x64, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x16, 0x72, 0x65, 0x6c, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x1a, 0x24, 0x72, 0x65, 0x6c, 0x6f,
	0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x72,
	0x65, 0x70, 0x65, 0x61, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x28, 0x72, 0x65, 0x6c, 0x6f, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x5f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x72, 0x65, 0x6c, 0x6f,
	0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x72,
	0x65, 0x70, 0x65, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x21, 0x72, 0x65, 0x6c, 0x6f, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x63, 0x6f, 0x75,
	0x72, 0x73, 0x65, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x72, 0x65, 0x6c, 0x6f, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x72, 0x65, 0x6c,
	0x6f, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x2f,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x28, 0x72, 0x65, 0x6c, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2f, 0x76, 0x6f, 0x2f, 0x74, 0x65, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x61, 0x74,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a, 0x72, 0x65, 0x6c,
	0x6f, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x2f,
	0x6c, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2d, 0x72, 0x65, 0x6c, 0x6f, 0x2f, 0x63, 0x6f,
	0x72, 0x65, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x5f, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8f, 0x08, 0x0a, 0x06, 0x41, 0x64, 0x64, 0x52, 0x65,
	0x71, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74,
	0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x74, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x73,
	0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0c, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19,
	0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0b, 0x72, 0x65, 0x70,
	0x65, 0x61, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e,
	0x2e, 0x72, 0x65, 0x6c, 0x6f, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a,
	0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x49, 0x0a, 0x0f, 0x73, 0x75,
	0x62, 0x5f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x72, 0x65, 0x6c, 0x6f, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x52, 0x65, 0x70, 0x65,
	0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x52, 0x65, 0x70, 0x65, 0x61,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x65, 0x70,
	0x65, 0x61, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x70, 0x65,
	0x61, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x12, 0x44, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x65, 0x6c, 0x6f, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x52, 0x65,
	0x70, 0x65, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x65, 0x61,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x72, 0x65,
	0x6c, 0x6f, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2e, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x42, 0x0a, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x72, 0x65, 0x6c, 0x6f,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x41,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x73, 0x5f, 0x63, 0x61,
	0x70, 0x74, 0x63, 0x68, 0x61, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x73, 0x43, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x52,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x72,
	0x65, 0x6c, 0x6f, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x40, 0x0a, 0x09, 0x6d, 0x61, 0x74, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x65,
	0x6c, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x6f, 0x2e, 0x54,
	0x65, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x52,
	0x09, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x4f, 0x0a, 0x11, 0x6c, 0x69,
	0x76, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x72, 0x65, 0x6c, 0x6f, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x41,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x6c, 0x69, 0x76, 0x65,
	0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x58, 0x0a, 0x14, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x5f, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x72, 0x65, 0x6c, 0x6f,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x12, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x31, 0x5a, 0x2f, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x65, 0x6c, 0x6f, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x3b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_relo_protocol_schedule_add_proto_rawDescOnce sync.Once
	file_relo_protocol_schedule_add_proto_rawDescData = file_relo_protocol_schedule_add_proto_rawDesc
)

func file_relo_protocol_schedule_add_proto_rawDescGZIP() []byte {
	file_relo_protocol_schedule_add_proto_rawDescOnce.Do(func() {
		file_relo_protocol_schedule_add_proto_rawDescData = protoimpl.X.CompressGZIP(file_relo_protocol_schedule_add_proto_rawDescData)
	})
	return file_relo_protocol_schedule_add_proto_rawDescData
}

var file_relo_protocol_schedule_add_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_relo_protocol_schedule_add_proto_goTypes = []interface{}{
	(*AddReq)(nil),                   // 0: relo.protocol.schedule.AddReq
	(schedule.RepeatType)(0),         // 1: relo.core.schedule.RepeatType
	(schedule.SubRepeatType)(0),      // 2: relo.core.schedule.SubRepeatType
	(*schedule.RepeatValue)(nil),     // 3: relo.core.schedule.RepeatValue
	(course.ClassMode)(0),            // 4: relo.core.course.ClassMode
	(schedule.AllowedType)(0),        // 5: relo.core.schedule.AllowedType
	(schedule.RecordType)(0),         // 6: relo.core.schedule.RecordType
	(*vo.TeachingMaterial)(nil),      // 7: relo.protocol.vo.TeachingMaterial
	(schedule.LiveAllowedType)(0),    // 8: relo.core.schedule.LiveAllowedType
	(schedule.VideoDimensionType)(0), // 9: relo.core.schedule.VideoDimensionType
}
var file_relo_protocol_schedule_add_proto_depIdxs = []int32{
	1, // 0: relo.protocol.schedule.AddReq.repeat_type:type_name -> relo.core.schedule.RepeatType
	2, // 1: relo.protocol.schedule.AddReq.sub_repeat_type:type_name -> relo.core.schedule.SubRepeatType
	3, // 2: relo.protocol.schedule.AddReq.repeat_values:type_name -> relo.core.schedule.RepeatValue
	4, // 3: relo.protocol.schedule.AddReq.class_mode:type_name -> relo.core.course.ClassMode
	5, // 4: relo.protocol.schedule.AddReq.allowed_type:type_name -> relo.core.schedule.AllowedType
	6, // 5: relo.protocol.schedule.AddReq.record_type:type_name -> relo.core.schedule.RecordType
	7, // 6: relo.protocol.schedule.AddReq.materials:type_name -> relo.protocol.vo.TeachingMaterial
	8, // 7: relo.protocol.schedule.AddReq.live_allowed_type:type_name -> relo.core.schedule.LiveAllowedType
	9, // 8: relo.protocol.schedule.AddReq.video_dimension_type:type_name -> relo.core.schedule.VideoDimensionType
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_relo_protocol_schedule_add_proto_init() }
func file_relo_protocol_schedule_add_proto_init() {
	if File_relo_protocol_schedule_add_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_relo_protocol_schedule_add_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_relo_protocol_schedule_add_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_relo_protocol_schedule_add_proto_goTypes,
		DependencyIndexes: file_relo_protocol_schedule_add_proto_depIdxs,
		MessageInfos:      file_relo_protocol_schedule_add_proto_msgTypes,
	}.Build()
	File_relo_protocol_schedule_add_proto = out.File
	file_relo_protocol_schedule_add_proto_rawDesc = nil
	file_relo_protocol_schedule_add_proto_goTypes = nil
	file_relo_protocol_schedule_add_proto_depIdxs = nil
}
