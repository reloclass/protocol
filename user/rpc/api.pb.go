// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.14.0
// source: relo/protocol/user/rpc/api.proto

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

var File_relo_protocol_user_rpc_api_proto protoreflect.FileDescriptor

var file_relo_protocol_user_rpc_api_proto_rawDesc = []byte{
	0x0a, 0x20, 0x72, 0x65, 0x6c, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f,
	0x75, 0x73, 0x65, 0x72, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x16, 0x72, 0x65, 0x6c, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x72, 0x70, 0x63, 0x1a, 0x21, 0x72, 0x65, 0x6c, 0x6f,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x72,
	0x70, 0x63, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x72,
	0x65, 0x6c, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x75, 0x73, 0x65,
	0x72, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x72, 0x65, 0x6c, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x6c, 0x6f, 0x67,
	0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x72, 0x65, 0x6c, 0x6f, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x72, 0x70, 0x63,
	0x2f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x20, 0x72, 0x65, 0x6c, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x67, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x20, 0x72, 0x65, 0x6c, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x61, 0x64, 0x64, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x72, 0x65, 0x6c, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x61, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x72, 0x65, 0x6c, 0x6f, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x72, 0x70, 0x63,
	0x2f, 0x6e, 0x69, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x32, 0xeb, 0x06, 0x0a, 0x03, 0x41, 0x70, 0x69, 0x12, 0x4a, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x1f, 0x2e, 0x72, 0x65, 0x6c, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x71, 0x1a, 0x1f, 0x2e, 0x72, 0x65, 0x6c, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x73, 0x70, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x08, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x12, 0x23, 0x2e, 0x72, 0x65, 0x6c, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x72, 0x65, 0x6c, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x05,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x20, 0x2e, 0x72, 0x65, 0x6c, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x72, 0x65, 0x6c, 0x6f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x09, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x77, 0x64, 0x12, 0x24, 0x2e, 0x72, 0x65, 0x6c, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x77, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x24,
	0x2e, 0x72, 0x65, 0x6c, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x77,
	0x64, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50,
	0x77, 0x64, 0x12, 0x23, 0x2e, 0x72, 0x65, 0x6c, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x65,
	0x74, 0x50, 0x77, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x72, 0x65, 0x6c, 0x6f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x77, 0x64, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x47,
	0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x1e, 0x2e, 0x72, 0x65, 0x6c, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x72, 0x65, 0x6c, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47,
	0x65, 0x74, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x73, 0x42,
	0x79, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x27, 0x2e, 0x72, 0x65, 0x6c, 0x6f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x47, 0x65, 0x74, 0x73, 0x42, 0x79, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71,
	0x1a, 0x27, 0x2e, 0x72, 0x65, 0x6c, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x73, 0x42, 0x79,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x11, 0x41,
	0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x66, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74,
	0x12, 0x1e, 0x2e, 0x72, 0x65, 0x6c, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71,
	0x1a, 0x1e, 0x2e, 0x72, 0x65, 0x6c, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x64, 0x64, 0x52, 0x73, 0x70,
	0x22, 0x00, 0x12, 0x59, 0x0a, 0x09, 0x53, 0x65, 0x74, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12,
	0x24, 0x2e, 0x72, 0x65, 0x6c, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x74, 0x41, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x72, 0x65, 0x6c, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53,
	0x65, 0x74, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x5f, 0x0a,
	0x0b, 0x53, 0x65, 0x74, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x2e, 0x72,
	0x65, 0x6c, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x74, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d,
	0x65, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x72, 0x65, 0x6c, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65,
	0x74, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x73, 0x70, 0x22, 0x00, 0x42, 0x2c,
	0x5a, 0x2a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x65, 0x6c,
	0x6f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f,
	0x75, 0x73, 0x65, 0x72, 0x2f, 0x72, 0x70, 0x63, 0x3b, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var file_relo_protocol_user_rpc_api_proto_goTypes = []interface{}{
	(*CodeReq)(nil),         // 0: relo.protocol.user.rpc.CodeReq
	(*RegisterReq)(nil),     // 1: relo.protocol.user.rpc.RegisterReq
	(*LoginReq)(nil),        // 2: relo.protocol.user.rpc.LoginReq
	(*UpdatePwdReq)(nil),    // 3: relo.protocol.user.rpc.UpdatePwdReq
	(*ResetPwdReq)(nil),     // 4: relo.protocol.user.rpc.ResetPwdReq
	(*GetReq)(nil),          // 5: relo.protocol.user.rpc.GetReq
	(*GetsByPagingReq)(nil), // 6: relo.protocol.user.rpc.GetsByPagingReq
	(*AddReq)(nil),          // 7: relo.protocol.user.rpc.AddReq
	(*SetAvatarReq)(nil),    // 8: relo.protocol.user.rpc.SetAvatarReq
	(*SetNicknameReq)(nil),  // 9: relo.protocol.user.rpc.SetNicknameReq
	(*CodeRsp)(nil),         // 10: relo.protocol.user.rpc.CodeRsp
	(*RegisterRsp)(nil),     // 11: relo.protocol.user.rpc.RegisterRsp
	(*LoginRsp)(nil),        // 12: relo.protocol.user.rpc.LoginRsp
	(*UpdatePwdRsp)(nil),    // 13: relo.protocol.user.rpc.UpdatePwdRsp
	(*ResetPwdRsp)(nil),     // 14: relo.protocol.user.rpc.ResetPwdRsp
	(*GetRsp)(nil),          // 15: relo.protocol.user.rpc.GetRsp
	(*GetsByPagingRsp)(nil), // 16: relo.protocol.user.rpc.GetsByPagingRsp
	(*AddRsp)(nil),          // 17: relo.protocol.user.rpc.AddRsp
	(*SetAvatarRsp)(nil),    // 18: relo.protocol.user.rpc.SetAvatarRsp
	(*SetNicknameRsp)(nil),  // 19: relo.protocol.user.rpc.SetNicknameRsp
}
var file_relo_protocol_user_rpc_api_proto_depIdxs = []int32{
	0,  // 0: relo.protocol.user.rpc.Api.Code:input_type -> relo.protocol.user.rpc.CodeReq
	1,  // 1: relo.protocol.user.rpc.Api.Register:input_type -> relo.protocol.user.rpc.RegisterReq
	2,  // 2: relo.protocol.user.rpc.Api.Login:input_type -> relo.protocol.user.rpc.LoginReq
	3,  // 3: relo.protocol.user.rpc.Api.UpdatePwd:input_type -> relo.protocol.user.rpc.UpdatePwdReq
	4,  // 4: relo.protocol.user.rpc.Api.ResetPwd:input_type -> relo.protocol.user.rpc.ResetPwdReq
	5,  // 5: relo.protocol.user.rpc.Api.Get:input_type -> relo.protocol.user.rpc.GetReq
	6,  // 6: relo.protocol.user.rpc.Api.GetsByPaging:input_type -> relo.protocol.user.rpc.GetsByPagingReq
	7,  // 7: relo.protocol.user.rpc.Api.AddUserIfNotExist:input_type -> relo.protocol.user.rpc.AddReq
	8,  // 8: relo.protocol.user.rpc.Api.SetAvatar:input_type -> relo.protocol.user.rpc.SetAvatarReq
	9,  // 9: relo.protocol.user.rpc.Api.SetNickname:input_type -> relo.protocol.user.rpc.SetNicknameReq
	10, // 10: relo.protocol.user.rpc.Api.Code:output_type -> relo.protocol.user.rpc.CodeRsp
	11, // 11: relo.protocol.user.rpc.Api.Register:output_type -> relo.protocol.user.rpc.RegisterRsp
	12, // 12: relo.protocol.user.rpc.Api.Login:output_type -> relo.protocol.user.rpc.LoginRsp
	13, // 13: relo.protocol.user.rpc.Api.UpdatePwd:output_type -> relo.protocol.user.rpc.UpdatePwdRsp
	14, // 14: relo.protocol.user.rpc.Api.ResetPwd:output_type -> relo.protocol.user.rpc.ResetPwdRsp
	15, // 15: relo.protocol.user.rpc.Api.Get:output_type -> relo.protocol.user.rpc.GetRsp
	16, // 16: relo.protocol.user.rpc.Api.GetsByPaging:output_type -> relo.protocol.user.rpc.GetsByPagingRsp
	17, // 17: relo.protocol.user.rpc.Api.AddUserIfNotExist:output_type -> relo.protocol.user.rpc.AddRsp
	18, // 18: relo.protocol.user.rpc.Api.SetAvatar:output_type -> relo.protocol.user.rpc.SetAvatarRsp
	19, // 19: relo.protocol.user.rpc.Api.SetNickname:output_type -> relo.protocol.user.rpc.SetNicknameRsp
	10, // [10:20] is the sub-list for method output_type
	0,  // [0:10] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_relo_protocol_user_rpc_api_proto_init() }
func file_relo_protocol_user_rpc_api_proto_init() {
	if File_relo_protocol_user_rpc_api_proto != nil {
		return
	}
	file_relo_protocol_user_rpc_code_proto_init()
	file_relo_protocol_user_rpc_register_proto_init()
	file_relo_protocol_user_rpc_login_proto_init()
	file_relo_protocol_user_rpc_password_proto_init()
	file_relo_protocol_user_rpc_get_proto_init()
	file_relo_protocol_user_rpc_add_proto_init()
	file_relo_protocol_user_rpc_avatar_proto_init()
	file_relo_protocol_user_rpc_nick_name_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_relo_protocol_user_rpc_api_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_relo_protocol_user_rpc_api_proto_goTypes,
		DependencyIndexes: file_relo_protocol_user_rpc_api_proto_depIdxs,
	}.Build()
	File_relo_protocol_user_rpc_api_proto = out.File
	file_relo_protocol_user_rpc_api_proto_rawDesc = nil
	file_relo_protocol_user_rpc_api_proto_goTypes = nil
	file_relo_protocol_user_rpc_api_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ApiClient is the client API for Api service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ApiClient interface {
	// 获取验证码
	Code(ctx context.Context, in *CodeReq, opts ...grpc.CallOption) (*CodeRsp, error)
	// 注册
	Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterRsp, error)
	// 登陆
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginRsp, error)
	// 修改密码
	UpdatePwd(ctx context.Context, in *UpdatePwdReq, opts ...grpc.CallOption) (*UpdatePwdRsp, error)
	// 重置密码
	ResetPwd(ctx context.Context, in *ResetPwdReq, opts ...grpc.CallOption) (*ResetPwdRsp, error)
	// 获取用户信息
	Get(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GetRsp, error)
	// 分页获取用户信息
	GetsByPaging(ctx context.Context, in *GetsByPagingReq, opts ...grpc.CallOption) (*GetsByPagingRsp, error)
	// 添加用户
	AddUserIfNotExist(ctx context.Context, in *AddReq, opts ...grpc.CallOption) (*AddRsp, error)
	// 设置头像
	SetAvatar(ctx context.Context, in *SetAvatarReq, opts ...grpc.CallOption) (*SetAvatarRsp, error)
	// 设置昵称
	SetNickname(ctx context.Context, in *SetNicknameReq, opts ...grpc.CallOption) (*SetNicknameRsp, error)
}

type apiClient struct {
	cc grpc.ClientConnInterface
}

func NewApiClient(cc grpc.ClientConnInterface) ApiClient {
	return &apiClient{cc}
}

func (c *apiClient) Code(ctx context.Context, in *CodeReq, opts ...grpc.CallOption) (*CodeRsp, error) {
	out := new(CodeRsp)
	err := c.cc.Invoke(ctx, "/relo.protocol.user.rpc.Api/Code", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterRsp, error) {
	out := new(RegisterRsp)
	err := c.cc.Invoke(ctx, "/relo.protocol.user.rpc.Api/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginRsp, error) {
	out := new(LoginRsp)
	err := c.cc.Invoke(ctx, "/relo.protocol.user.rpc.Api/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) UpdatePwd(ctx context.Context, in *UpdatePwdReq, opts ...grpc.CallOption) (*UpdatePwdRsp, error) {
	out := new(UpdatePwdRsp)
	err := c.cc.Invoke(ctx, "/relo.protocol.user.rpc.Api/UpdatePwd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) ResetPwd(ctx context.Context, in *ResetPwdReq, opts ...grpc.CallOption) (*ResetPwdRsp, error) {
	out := new(ResetPwdRsp)
	err := c.cc.Invoke(ctx, "/relo.protocol.user.rpc.Api/ResetPwd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) Get(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GetRsp, error) {
	out := new(GetRsp)
	err := c.cc.Invoke(ctx, "/relo.protocol.user.rpc.Api/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetsByPaging(ctx context.Context, in *GetsByPagingReq, opts ...grpc.CallOption) (*GetsByPagingRsp, error) {
	out := new(GetsByPagingRsp)
	err := c.cc.Invoke(ctx, "/relo.protocol.user.rpc.Api/GetsByPaging", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) AddUserIfNotExist(ctx context.Context, in *AddReq, opts ...grpc.CallOption) (*AddRsp, error) {
	out := new(AddRsp)
	err := c.cc.Invoke(ctx, "/relo.protocol.user.rpc.Api/AddUserIfNotExist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) SetAvatar(ctx context.Context, in *SetAvatarReq, opts ...grpc.CallOption) (*SetAvatarRsp, error) {
	out := new(SetAvatarRsp)
	err := c.cc.Invoke(ctx, "/relo.protocol.user.rpc.Api/SetAvatar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) SetNickname(ctx context.Context, in *SetNicknameReq, opts ...grpc.CallOption) (*SetNicknameRsp, error) {
	out := new(SetNicknameRsp)
	err := c.cc.Invoke(ctx, "/relo.protocol.user.rpc.Api/SetNickname", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiServer is the server API for Api service.
type ApiServer interface {
	// 获取验证码
	Code(context.Context, *CodeReq) (*CodeRsp, error)
	// 注册
	Register(context.Context, *RegisterReq) (*RegisterRsp, error)
	// 登陆
	Login(context.Context, *LoginReq) (*LoginRsp, error)
	// 修改密码
	UpdatePwd(context.Context, *UpdatePwdReq) (*UpdatePwdRsp, error)
	// 重置密码
	ResetPwd(context.Context, *ResetPwdReq) (*ResetPwdRsp, error)
	// 获取用户信息
	Get(context.Context, *GetReq) (*GetRsp, error)
	// 分页获取用户信息
	GetsByPaging(context.Context, *GetsByPagingReq) (*GetsByPagingRsp, error)
	// 添加用户
	AddUserIfNotExist(context.Context, *AddReq) (*AddRsp, error)
	// 设置头像
	SetAvatar(context.Context, *SetAvatarReq) (*SetAvatarRsp, error)
	// 设置昵称
	SetNickname(context.Context, *SetNicknameReq) (*SetNicknameRsp, error)
}

// UnimplementedApiServer can be embedded to have forward compatible implementations.
type UnimplementedApiServer struct {
}

func (*UnimplementedApiServer) Code(context.Context, *CodeReq) (*CodeRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Code not implemented")
}
func (*UnimplementedApiServer) Register(context.Context, *RegisterReq) (*RegisterRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (*UnimplementedApiServer) Login(context.Context, *LoginReq) (*LoginRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (*UnimplementedApiServer) UpdatePwd(context.Context, *UpdatePwdReq) (*UpdatePwdRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePwd not implemented")
}
func (*UnimplementedApiServer) ResetPwd(context.Context, *ResetPwdReq) (*ResetPwdRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPwd not implemented")
}
func (*UnimplementedApiServer) Get(context.Context, *GetReq) (*GetRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedApiServer) GetsByPaging(context.Context, *GetsByPagingReq) (*GetsByPagingRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetsByPaging not implemented")
}
func (*UnimplementedApiServer) AddUserIfNotExist(context.Context, *AddReq) (*AddRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserIfNotExist not implemented")
}
func (*UnimplementedApiServer) SetAvatar(context.Context, *SetAvatarReq) (*SetAvatarRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAvatar not implemented")
}
func (*UnimplementedApiServer) SetNickname(context.Context, *SetNicknameReq) (*SetNicknameRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetNickname not implemented")
}

func RegisterApiServer(s *grpc.Server, srv ApiServer) {
	s.RegisterService(&_Api_serviceDesc, srv)
}

func _Api_Code_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).Code(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relo.protocol.user.rpc.Api/Code",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).Code(ctx, req.(*CodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relo.protocol.user.rpc.Api/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).Register(ctx, req.(*RegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relo.protocol.user.rpc.Api/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_UpdatePwd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePwdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).UpdatePwd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relo.protocol.user.rpc.Api/UpdatePwd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).UpdatePwd(ctx, req.(*UpdatePwdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_ResetPwd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPwdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).ResetPwd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relo.protocol.user.rpc.Api/ResetPwd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).ResetPwd(ctx, req.(*ResetPwdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relo.protocol.user.rpc.Api/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).Get(ctx, req.(*GetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetsByPaging_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetsByPagingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetsByPaging(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relo.protocol.user.rpc.Api/GetsByPaging",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetsByPaging(ctx, req.(*GetsByPagingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_AddUserIfNotExist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).AddUserIfNotExist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relo.protocol.user.rpc.Api/AddUserIfNotExist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).AddUserIfNotExist(ctx, req.(*AddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_SetAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAvatarReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).SetAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relo.protocol.user.rpc.Api/SetAvatar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).SetAvatar(ctx, req.(*SetAvatarReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_SetNickname_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetNicknameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).SetNickname(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relo.protocol.user.rpc.Api/SetNickname",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).SetNickname(ctx, req.(*SetNicknameReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Api_serviceDesc = grpc.ServiceDesc{
	ServiceName: "relo.protocol.user.rpc.Api",
	HandlerType: (*ApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Code",
			Handler:    _Api_Code_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _Api_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _Api_Login_Handler,
		},
		{
			MethodName: "UpdatePwd",
			Handler:    _Api_UpdatePwd_Handler,
		},
		{
			MethodName: "ResetPwd",
			Handler:    _Api_ResetPwd_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Api_Get_Handler,
		},
		{
			MethodName: "GetsByPaging",
			Handler:    _Api_GetsByPaging_Handler,
		},
		{
			MethodName: "AddUserIfNotExist",
			Handler:    _Api_AddUserIfNotExist_Handler,
		},
		{
			MethodName: "SetAvatar",
			Handler:    _Api_SetAvatar_Handler,
		},
		{
			MethodName: "SetNickname",
			Handler:    _Api_SetNickname_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "relo/protocol/user/rpc/api.proto",
}
