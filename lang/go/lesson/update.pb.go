// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.14.0
// source: relo/protocol/lesson/update.proto

package lesson

import (
	courseschedule "github.com/reloclass/core/courseschedule"
	vo "github.com/reloclass/protocol/vo"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 更新课节请求
type UpdateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 课节编号
	// @gotags: param:"id"
	Id int64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty" param:"id"`
	// 课程编号
	// @gotags: json:"courseId,string" validate:"required"
	CourseId int64 `protobuf:"varint,3,opt,name=course_id,json=courseId,proto3" json:"courseId,string" validate:"required"`
	// 主讲老师
	// @gotags: json:"teacherId,string" validate:"required"
	TeacherId int64 `protobuf:"varint,4,opt,name=teacher_id,json=teacherId,proto3" json:"teacherId,string" validate:"required"`
	// 助教
	// @gotags: json:"assistantIds"
	AssistantIds []string `protobuf:"bytes,5,rep,name=assistant_ids,json=assistantIds,proto3" json:"assistantIds"`
	// 课节名称
	Name string `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	// 上课时间
	// @gotags: json:"classTime"
	ClassTime string `protobuf:"bytes,7,opt,name=class_time,json=classTime,proto3" json:"classTime"`
	// 授课时长 单位：分钟
	// @gotags: json:"duration" validate:"omitempty,min=1,max=450"
	Duration int32 `protobuf:"varint,8,opt,name=duration,proto3" json:"duration" validate:"omitempty,min=1,max=450"`
	// 允许类型
	// @gotags: default:"1" json:"allowedType" validate:"omitempty,oneof=1 2 3"
	AllowedType courseschedule.AllowedType `protobuf:"varint,9,opt,name=allowed_type,json=allowedType,proto3,enum=relo.core.courseschedule.AllowedType" json:"allowedType" default:"1" validate:"omitempty,oneof=1 2 3"`
	// 是否需要验证码
	// json:"isCaptchaRequired" validate:"omitempty"
	IsCaptchaRequired bool `protobuf:"varint,10,opt,name=is_captcha_required,json=isCaptchaRequired,proto3" json:"is_captcha_required,omitempty"`
	// 录制操作类型
	// @gotags: default:"1" json:"recordType" validate:"omitempty,oneof=1 2 3"
	RecordType courseschedule.RecordType `protobuf:"varint,11,opt,name=record_type,json=recordType,proto3,enum=relo.core.courseschedule.RecordType" json:"recordType" default:"1" validate:"omitempty,oneof=1 2 3"`
	// 课程计划教学资料
	Materials []*vo.TeachingMaterial `protobuf:"bytes,12,rep,name=materials,proto3" json:"materials,omitempty"`
	// 是否允许直播
	// @gotags: json:"liveAllowedType" validate:"required,oneof=1 2"
	LiveAllowedType courseschedule.LiveAllowedType `protobuf:"varint,13,opt,name=live_allowed_type,json=liveAllowedType,proto3,enum=relo.core.courseschedule.LiveAllowedType" json:"liveAllowedType" validate:"required,oneof=1 2"`
	// 视频质量
	// @gotags: json:"videoDimension" validate:"required,oneof=1 2 3"
	VideoDimensionType courseschedule.VideoDimensionType `protobuf:"varint,14,opt,name=video_dimension_type,json=videoDimensionType,proto3,enum=relo.core.courseschedule.VideoDimensionType" json:"videoDimension" validate:"required,oneof=1 2 3"`
	// 上台人数
	// @gotags: json:"stageNumber" validate:"required,min=1,max=12"
	StateNumber int32 `protobuf:"varint,15,opt,name=state_number,json=stateNumber,proto3" json:"stageNumber" validate:"required,min=1,max=12"`
}

func (x *UpdateReq) Reset() {
	*x = UpdateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relo_protocol_lesson_update_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateReq) ProtoMessage() {}

func (x *UpdateReq) ProtoReflect() protoreflect.Message {
	mi := &file_relo_protocol_lesson_update_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateReq.ProtoReflect.Descriptor instead.
func (*UpdateReq) Descriptor() ([]byte, []int) {
	return file_relo_protocol_lesson_update_proto_rawDescGZIP(), []int{0}
}

func (x *UpdateReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateReq) GetCourseId() int64 {
	if x != nil {
		return x.CourseId
	}
	return 0
}

func (x *UpdateReq) GetTeacherId() int64 {
	if x != nil {
		return x.TeacherId
	}
	return 0
}

func (x *UpdateReq) GetAssistantIds() []string {
	if x != nil {
		return x.AssistantIds
	}
	return nil
}

func (x *UpdateReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateReq) GetClassTime() string {
	if x != nil {
		return x.ClassTime
	}
	return ""
}

func (x *UpdateReq) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *UpdateReq) GetAllowedType() courseschedule.AllowedType {
	if x != nil {
		return x.AllowedType
	}
	return courseschedule.AllowedType_ALLOWED_TYPE_UNSPECIFIED
}

func (x *UpdateReq) GetIsCaptchaRequired() bool {
	if x != nil {
		return x.IsCaptchaRequired
	}
	return false
}

func (x *UpdateReq) GetRecordType() courseschedule.RecordType {
	if x != nil {
		return x.RecordType
	}
	return courseschedule.RecordType_RECORD_TYPE_UNSPECIFIED
}

func (x *UpdateReq) GetMaterials() []*vo.TeachingMaterial {
	if x != nil {
		return x.Materials
	}
	return nil
}

func (x *UpdateReq) GetLiveAllowedType() courseschedule.LiveAllowedType {
	if x != nil {
		return x.LiveAllowedType
	}
	return courseschedule.LiveAllowedType_LIVE_ALLOWED_TYPE_UNSPECIFIED
}

func (x *UpdateReq) GetVideoDimensionType() courseschedule.VideoDimensionType {
	if x != nil {
		return x.VideoDimensionType
	}
	return courseschedule.VideoDimensionType_VIDEO_DIMENSION_TYPE_UNSPECIFIED
}

func (x *UpdateReq) GetStateNumber() int32 {
	if x != nil {
		return x.StateNumber
	}
	return 0
}

// 更新已开始的课节
type UpdateStartingReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 课节编号
	// @gotags: param:"id"
	Id int64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty" param:"id"`
	// 课节名称
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// 课程计划教学资料
	Materials []*vo.TeachingMaterial `protobuf:"bytes,4,rep,name=materials,proto3" json:"materials,omitempty"`
	// 录制操作类型
	// @gotags: default:"1" json:"recordType" validate:"omitempty,oneof=1 2 3"
	RecordType courseschedule.RecordType `protobuf:"varint,5,opt,name=record_type,json=recordType,proto3,enum=relo.core.courseschedule.RecordType" json:"recordType" default:"1" validate:"omitempty,oneof=1 2 3"`
	// 是否允许直播
	// @gotags: json:"liveAllowedType" validate:"required,oneof=1 2"
	LiveAllowedType courseschedule.LiveAllowedType `protobuf:"varint,6,opt,name=live_allowed_type,json=liveAllowedType,proto3,enum=relo.core.courseschedule.LiveAllowedType" json:"liveAllowedType" validate:"required,oneof=1 2"`
}

func (x *UpdateStartingReq) Reset() {
	*x = UpdateStartingReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relo_protocol_lesson_update_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateStartingReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateStartingReq) ProtoMessage() {}

func (x *UpdateStartingReq) ProtoReflect() protoreflect.Message {
	mi := &file_relo_protocol_lesson_update_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateStartingReq.ProtoReflect.Descriptor instead.
func (*UpdateStartingReq) Descriptor() ([]byte, []int) {
	return file_relo_protocol_lesson_update_proto_rawDescGZIP(), []int{1}
}

func (x *UpdateStartingReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateStartingReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateStartingReq) GetMaterials() []*vo.TeachingMaterial {
	if x != nil {
		return x.Materials
	}
	return nil
}

func (x *UpdateStartingReq) GetRecordType() courseschedule.RecordType {
	if x != nil {
		return x.RecordType
	}
	return courseschedule.RecordType_RECORD_TYPE_UNSPECIFIED
}

func (x *UpdateStartingReq) GetLiveAllowedType() courseschedule.LiveAllowedType {
	if x != nil {
		return x.LiveAllowedType
	}
	return courseschedule.LiveAllowedType_LIVE_ALLOWED_TYPE_UNSPECIFIED
}

var File_relo_protocol_lesson_update_proto protoreflect.FileDescriptor

var file_relo_protocol_lesson_update_proto_rawDesc = []byte{
	0x0a, 0x21, 0x72, 0x65, 0x6c, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f,
	0x6c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x14, 0x72, 0x65, 0x6c, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x6c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x1a, 0x2b, 0x72, 0x65, 0x6c, 0x6f, 0x2f,
	0x63, 0x6f, 0x72, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x2f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a, 0x72, 0x65, 0x6c, 0x6f, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x2f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x28, 0x72, 0x65, 0x6c, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2f, 0x76, 0x6f, 0x2f, 0x74, 0x65, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x61,
	0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x30, 0x72, 0x65,
	0x6c, 0x6f, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x33,
	0x72, 0x65, 0x6c, 0x6f, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x64,
	0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xa8, 0x05, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x74, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x74, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x49,
	0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x48, 0x0a, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x72, 0x65, 0x6c, 0x6f, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x69,
	0x73, 0x5f, 0x63, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x73, 0x43, 0x61, 0x70, 0x74,
	0x63, 0x68, 0x61, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x45, 0x0a, 0x0b, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x24, 0x2e, 0x72, 0x65, 0x6c, 0x6f, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x75,
	0x72, 0x73, 0x65, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x40, 0x0a, 0x09, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x18,
	0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x65, 0x6c, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x6f, 0x2e, 0x54, 0x65, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x67, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x73, 0x12, 0x55, 0x0a, 0x11, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x29, 0x2e, 0x72, 0x65, 0x6c, 0x6f, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x75, 0x72,
	0x73, 0x65, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x41,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x6c, 0x69, 0x76, 0x65,
	0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5e, 0x0a, 0x14, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x5f, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x72, 0x65, 0x6c, 0x6f,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x12, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x69,
	0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x97,
	0x02, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x09, 0x6d, 0x61, 0x74, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x65,
	0x6c, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x6f, 0x2e, 0x54,
	0x65, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x52,
	0x09, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x45, 0x0a, 0x0b, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x24, 0x2e, 0x72, 0x65, 0x6c, 0x6f, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x75, 0x72,
	0x73, 0x65, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x55, 0x0a, 0x11, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x72,
	0x65, 0x6c, 0x6f, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x41, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x6c, 0x69, 0x76, 0x65, 0x41, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x42, 0x2d, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x65, 0x6c, 0x6f, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x6c, 0x65, 0x73, 0x73, 0x6f, 0x6e,
	0x3b, 0x6c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_relo_protocol_lesson_update_proto_rawDescOnce sync.Once
	file_relo_protocol_lesson_update_proto_rawDescData = file_relo_protocol_lesson_update_proto_rawDesc
)

func file_relo_protocol_lesson_update_proto_rawDescGZIP() []byte {
	file_relo_protocol_lesson_update_proto_rawDescOnce.Do(func() {
		file_relo_protocol_lesson_update_proto_rawDescData = protoimpl.X.CompressGZIP(file_relo_protocol_lesson_update_proto_rawDescData)
	})
	return file_relo_protocol_lesson_update_proto_rawDescData
}

var file_relo_protocol_lesson_update_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_relo_protocol_lesson_update_proto_goTypes = []interface{}{
	(*UpdateReq)(nil),                      // 0: relo.protocol.lesson.UpdateReq
	(*UpdateStartingReq)(nil),              // 1: relo.protocol.lesson.UpdateStartingReq
	(courseschedule.AllowedType)(0),        // 2: relo.core.courseschedule.AllowedType
	(courseschedule.RecordType)(0),         // 3: relo.core.courseschedule.RecordType
	(*vo.TeachingMaterial)(nil),            // 4: relo.protocol.vo.TeachingMaterial
	(courseschedule.LiveAllowedType)(0),    // 5: relo.core.courseschedule.LiveAllowedType
	(courseschedule.VideoDimensionType)(0), // 6: relo.core.courseschedule.VideoDimensionType
}
var file_relo_protocol_lesson_update_proto_depIdxs = []int32{
	2, // 0: relo.protocol.lesson.UpdateReq.allowed_type:type_name -> relo.core.courseschedule.AllowedType
	3, // 1: relo.protocol.lesson.UpdateReq.record_type:type_name -> relo.core.courseschedule.RecordType
	4, // 2: relo.protocol.lesson.UpdateReq.materials:type_name -> relo.protocol.vo.TeachingMaterial
	5, // 3: relo.protocol.lesson.UpdateReq.live_allowed_type:type_name -> relo.core.courseschedule.LiveAllowedType
	6, // 4: relo.protocol.lesson.UpdateReq.video_dimension_type:type_name -> relo.core.courseschedule.VideoDimensionType
	4, // 5: relo.protocol.lesson.UpdateStartingReq.materials:type_name -> relo.protocol.vo.TeachingMaterial
	3, // 6: relo.protocol.lesson.UpdateStartingReq.record_type:type_name -> relo.core.courseschedule.RecordType
	5, // 7: relo.protocol.lesson.UpdateStartingReq.live_allowed_type:type_name -> relo.core.courseschedule.LiveAllowedType
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_relo_protocol_lesson_update_proto_init() }
func file_relo_protocol_lesson_update_proto_init() {
	if File_relo_protocol_lesson_update_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_relo_protocol_lesson_update_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relo_protocol_lesson_update_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateStartingReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_relo_protocol_lesson_update_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_relo_protocol_lesson_update_proto_goTypes,
		DependencyIndexes: file_relo_protocol_lesson_update_proto_depIdxs,
		MessageInfos:      file_relo_protocol_lesson_update_proto_msgTypes,
	}.Build()
	File_relo_protocol_lesson_update_proto = out.File
	file_relo_protocol_lesson_update_proto_rawDesc = nil
	file_relo_protocol_lesson_update_proto_goTypes = nil
	file_relo_protocol_lesson_update_proto_depIdxs = nil
}
